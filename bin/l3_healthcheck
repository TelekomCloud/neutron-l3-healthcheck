#
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Sylvain Afchain <sylvain.afchain@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import eventlet
from sqlalchemy.orm import joinedload

from neutron.api.rpc.agentnotifiers import l3_rpc_agent_api as l3_rpc
from neutron.common import constants
from neutron import context as n_context
from neutron.db import agents_db
from neutron.db import agentschedulers_db
from neutron.db import db_base_plugin_v2
from neutron.db import l3_db
from neutron.openstack.common.rpc import service as rpc_service
from neutron.openstack.common import periodic_task
from neutron.openstack.common import service
from neutron.openstack.common import log as logging
from neutron.plugins.openvswitch import ovs_db_v2
from neutron.scheduler import l3_agent_scheduler
from oslo.config import cfg

LOG = logging.getLogger(__name__)


class Manager(periodic_task.PeriodicTasks,
              db_base_plugin_v2.CommonDbMixin,
              l3_agent_scheduler.ChanceScheduler,
              l3_db.L3_NAT_db_mixin,
              agentschedulers_db.L3AgentSchedulerDbMixin):
    RPC_API_VERSION = '1.0'

    _dict_extend_functions = {}

    def __init__(self, host=None):
        self.host = host
        self.context = n_context.get_admin_context()
        super(Manager, self).__init__()

    @periodic_task.periodic_task
    def healcheck(self, context):
        LOG.info("Healthcheck")
        agents = self.get_agents(self.context)
        for agent in agents:
            """ 
            self.update_agent(self.context, agent['id'],
                              {'agent': {'admin_state_up':
                                         True}})
            continue
            """

            import pdb
            pdb.set_trace()
            if (agent['agent_type'] == constants.AGENT_TYPE_L3):# and
                    #agent['admin_state_up'] == True):
                if agents_db.AgentDbMixin.is_agent_down(
                        agent['heartbeat_timestamp']):
                    LOG.error("XXX WTF: %s before %s", 
                              agent['host'], agent['admin_state_up'])

                    """
                    self.update_agent(self.context, agent['id'],
                                      {'agent': {'admin_state_up':
                                                 False}})
                    """

                    LOG.debug("XXX WTF: %s after %s", agent['host'], False)

                    routers = self.list_routers_on_l3_agent(self.context,
                                                            agent['id'])
                                                     
                    for router in routers['routers']:
                    	LOG.debug("XXX remove router %s from agent %s",
                                  router['id'], agent['id'])

#                    	self.remove_router_from_l3_agent(self.context,
#                                                         agent['id'],
#                                                         router['id'])

			router_db = router = self._get_router(self.context,
							      router['id'])
 
                        import pdb
                        pdb.set_trace()
			binding = ovs_db_v2.get_network_binding(
				None, router_db.gw_port.network_id)

                        self.schedule(self, self.context, router['id'])
                    	LOG.debug("XXX router %s rescheduled", router['id'])

                    l3_rpc.L3AgentNotify.agent_updated(self.context, 
                                                       True, agent['host'])

    def get_l3_agents_hosting_routers(self, context, router_ids,
                                      admin_state_up=None,
                                      active=True):
        if not router_ids:
            return []
        query = context.session.query(agentschedulers_db.RouterL3AgentBinding)
        if len(router_ids) > 1:
            query = query.options(joinedload('l3_agent')).filter(
                RouterL3AgentBinding.router_id.in_(router_ids))
        else:
            query = query.options(joinedload('l3_agent')).filter(
                agentschedulers_db.RouterL3AgentBinding.router_id == router_ids[0])
        if admin_state_up is not None:
            query = (query.filter(agents_db.Agent.admin_state_up ==
                                  admin_state_up))
        l3_agents = [binding.l3_agent for binding in query]
        if active is not None:
            l3_agents = [l3_agent for l3_agent in
                         l3_agents if not
                         agents_db.AgentDbMixin.is_agent_down(
                            l3_agent['heartbeat_timestamp']) and
                         l3_agent['admin_state_up']]

        return l3_agents

    def _get_marker_obj(self, context, resource, limit, marker):
        if limit and marker:
            return getattr(self, '_get_%s' % resource)(context, marker)
        return None


class L3healthcheckManager(Manager):

    def __init__(self, host):
        self.host = host
        super(L3healthcheckManager, self).__init__(host=self.host)


class L3healthcheck(rpc_service.Service):

    OPTS = [
        cfg.IntOpt(
            'check_interval',
            default=10,
            help='Seconds between periodic check'
        )
    ]

    def __init__(self, host, topic):
        self.host = host
        self.topic = topic

        self.manager = L3healthcheckManager(host)
        super(L3healthcheck, self).__init__(host, self.topic,
                                            manager=self.manager)

    def start(self):
        super(L3healthcheck, self).start()
        self.tg.add_timer(
            cfg.CONF.check_interval,
            self.manager.run_periodic_tasks,
            None,
            None
        )


def main():
    LOG.debug("Starting....")
    eventlet.monkey_patch()
    server = L3healthcheck("local", "l3healthcheck")
    service.launch(server).wait()


if __name__ == "__main__":
    product_name = "l3_healthcheck"

    cfg.CONF(project=product_name)
    cfg.CONF.register_opts(L3healthcheck.OPTS)
    logging.setup(product_name)
    main()
